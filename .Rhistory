lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
unlist(lengths)
length(notes$V1)
setwd("C:/Users/ianfr/Desktop/R_Programs/notes-analysis")
library (dplyr)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V15)
str(df)
notes <- select(df, V1, V2)
str(notes)
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
notes$V15 <- tolower(notes$V15)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
notes
notes <- select(df, V1, V2)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
notes
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
notes$V15 <- tolower(notes$V15)
notes$V2 <- tolower(notes$2)
notes$V2 <- tolower(notes$V2)
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
lookuptable
newfile <- data_frame()
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
#Aggregated lookup table
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
#######-----Intialize "cluster" function-----
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
#CLUSTER: Furniture Sales
cluster (c("furniture","sale"))
activiation.notes <- newfile
#CLUSTER: Payment
cluster (c("pay"))
payment.notes <- newfile
#CLUSTER: Invoice
cluster  (c("invoice"))
pin.notes <- newfile
#CLUSTER: Return
cluster  (c("return", "merch"))
fee.notes <- newfile
#CLUSTER: Delivery Problem
cluster  (c("delivery","problem"))
web.notes <- newfile
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
#Aggregated lookup table
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
#######-----Intialize "cluster" function-----
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
#CLUSTER: Furniture Sales
cluster (c("furniture","sale"))
activiation.notes <- newfile
#CLUSTER: Payment
cluster (c("pay"))
payment.notes <- newfile
#CLUSTER: Invoice
cluster  (c("invoice"))
pin.notes <- newfile
#CLUSTER: Return
cluster  (c("return", "merch"))
fee.notes <- newfile
#CLUSTER: Delivery Problem
cluster  (c("delivery","problem"))
web.notes <- newfile
library(ggplot2)
library (purrr)
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
results
library (dplyr)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V2)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
notes$V2 <- tolower(notes$V2)
notes$V2 <- tolower(notes$V2)
library (dplyr)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V2)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
notes$V2 <- tolower(notes$V2)
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
cluster (c("furniture","sale"))
activiation.notes <- newfile
cluster (c("refund"))
payment.notes <- newfile
cluster  (c("invoice"))
pin.notes <- newfile
cluster  (c("return", "merch"))
fee.notes <- newfile
cluster  (c("delivery","problem"))
web.notes <- newfile
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
#Aggregated lookup table
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
#######-----Intialize "cluster" function-----
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
#CLUSTER: Furniture Sales
cluster (c("furniture","sale"))
activiation.notes <- newfile
#CLUSTER: Refund
cluster (c("refund"))
payment.notes <- newfile
#CLUSTER: Invoice
cluster  (c("invoice"))
pin.notes <- newfile
#CLUSTER: Return
cluster  (c("return", "merch"))
fee.notes <- newfile
#CLUSTER: Delivery Problem
cluster  (c("delivery","problem"))
web.notes <- newfile
notes
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
library(tm)
library(reshape)
library (SnowballC)
notes.corpus <- Corpus(VectorSource(notes$V2))
notes.corpus <- tm_map  (notes.corpus, removePunctuation)
notes.dtm <- TermDocumentMatrix(notes.corpus, control = list(stopwords=TRUE, wordLengths = c(1,30)))
findFreqTerms(notes.dtm, 500, 1000)
freqwrds <- sort (rowSums(as.matrix(notes.dtm)), decreasing = TRUE)
melt (freqwrds [1:25])
matchwords <- c("delivery", "couch")
x <- sapply(notes.corpus, `[[`, 1)
output <- unique (grep(paste(matchwords, collapse = "|"), x, value= TRUE))
output.corpus <- Corpus(VectorSource(output))
freqoutput <- sort (rowSums(as.matrix(output.dtm)), decreasing = TRUE)
output.dtm <- TermDocumentMatrix(output.corpus, control = list(stopwords = TRUE, wordLengths = c(1,30)))
melt (freqoutput [1:20])
matchwords <- c("delivery", "couch")
x <- sapply(notes.corpus, `[[`, 1)
output <- unique (grep(paste(matchwords, collapse = "|"), x, value= TRUE))
output.corpus <- Corpus(VectorSource(output))
output.dtm <- TermDocumentMatrix(output.corpus, control = list(stopwords = TRUE, wordLengths = c(1,30)))
freqoutput <- sort (rowSums(as.matrix(output.dtm)), decreasing = TRUE)
melt (freqoutput [1:20])
library(ggplot2)
library (purrr)
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
title <- readline("What should the of the plot be?")
title
#Add Labeling for Aug 2017
resultsplot + labs(title = title,
subtitle = "Total Notes: 54,471
Repeat Calls: 11,036 (.20%)",
caption = "Special Notes:")
plot1subtitle <- readline("Add a subtitle? ")
Test
plot1subtitle
plot1subtitle <- readline("Add a subtitle? ")
#Create plots
library(ggplot2)
library (purrr)
#Find all data.frames in global and isolate clusternames
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
#Create number of data observations vector(dataobs) using map to iterate over clusternames into function nrow
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
#Build the results data.frame
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
#Create "resultsplot" vector with core plotting
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
plot1title <- readline("What should the of the plot be? ")
plot1caption <- readline("Add a caption")
#Add Labeling for Aug 2017
resultsplot + labs(title = plot1title,
subtitle = plot1subtitle,
caption = plot1caption)
#Create plots
library(ggplot2)
library (purrr)
#Find all data.frames in global and isolate clusternames
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
#Create number of data observations vector(dataobs) using map to iterate over clusternames into function nrow
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
#Build the results data.frame
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
#Create "resultsplot" vector with core plotting
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
plot1title <- readline("What should the of the plot be? ")
plot1subtitle <- readline("Add a subtitle? ")
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
#Aggregated lookup table
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
#######-----Intialize "cluster" function-----
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
#CLUSTER: Furniture Sales
cluster (c("furniture","sale"))
activiation.notes <- newfile
#CLUSTER: Refund
cluster (c("refund"))
payment.notes <- newfile
#CLUSTER: Invoice
cluster  (c("invoice"))
pin.notes <- newfile
#CLUSTER: Return
cluster  (c("return", "merch"))
fee.notes <- newfile
#CLUSTER: Delivery Problem
cluster  (c("delivery","problem"))
web.notes <- newfile
#Create plots
library(ggplot2)
library (purrr)
#Find all data.frames in global and isolate clusternames
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
#Create number of data observations vector(dataobs) using map to iterate over clusternames into function nrow
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
#Build the results data.frame
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
#Create "resultsplot" vector with core plotting
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
plot1title <- readline("What should the of the plot be? ")
plot1subtitle <- readline("Add a subtitle? ")
plot1caption <- readline("Add a caption")
resultsplot + labs(title = plot1title,
subtitle = plot1subtitle,
caption = plot1caption)
library (dplyr)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V2)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
notes$V2 <- tolower(notes$V2)
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
cluster (c("furniture","sale"))
furniture_sales.notes <- newfile
#The following script creates the text clusters for analysis
library (dplyr)
#Load Noble Data
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#Convert to lowercase
notes$V2 <- tolower(notes$V2)
#Aggregated lookup table
lookuptable <- aggregate(V1~ V2, data = df, paste, collapse = ", ")
#######-----Intialize "cluster" function-----
newfile <- data_frame()
cluster <- function(matchwords) {
newfile <<- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% newfile$V1)
notes <<- notes[-rowlocation,]
}
#CLUSTER: Furniture Sales
cluster (c("furniture","sale"))
furniture_sales.notes <- newfile
#CLUSTER: Refund
cluster (c("refund"))
refunds.notes <- newfile
#CLUSTER: Invoice
cluster  (c("invoice"))
invoice.notes <- newfile
#CLUSTER: Return
cluster  (c("return", "merch"))
returns.notes <- newfile
#CLUSTER: Delivery Problem
cluster  (c("delivery","problem"))
complaints.notes <- newfile
library(ggplot2)
library (purrr)
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
plot1title <- readline("What should the of the plot be? ")
plot1subtitle <- readline("Add a subtitle? ")
plot1caption <- readline("Add a caption? ")
resultsplot + labs(title = plot1title,
subtitle = plot1subtitle,
caption = plot1caption)
ggplot(NULL, aes(x = Clusters, y = Data, group = Data)) +
geom_point(data = milestoneresults, size = 5, color = "red") +
geom_point(data = indigoresults, size = 3, color = "blue") +
scale_y_continuous(limits = c(0,15000))
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
plot1title <- readline("What should the of the plot be? ")
plot1subtitle <- readline("Add a subtitle? ")
plot1caption <- readline("Add a caption? ")
resultsplot + labs(title = plot1title,
subtitle = plot1subtitle,
caption = plot1caption)
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
library(ggplot2)
library (purrr)
clusternames <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
x <- grep(".notes", clusternames)
clusternames <- clusternames[x]
dataobs <- map(clusternames, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
clusternames <- gsub(".notes","",clusternames)
results <- data.frame(Clusters = clusternames)
data <- unlist(dataobs)
results <- cbind(results, Data = data)
results <- results[order(results$Data, decreasing = TRUE), ]
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
resultsplot <- + geom_bar(stat = "identity")
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data))
resultsplot <- + geom_bar(stat = "identity")
#Create "resultsplot" vector with core plotting
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data))
resultsplot + geom_bar(stat = "identity")
resultsplot + scale_x_discrete(limits = results$Clusters) +
resultsplot + scale_fill_gradient(high = "red", low = "green")
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data))
resultsplot + geom_bar(stat = "identity")
resultsplot + scale_x_discrete(limits = results$Clusters)
resultsplot + scale_fill_gradient(high = "red", low = "green")
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data))
resultsplot + geom_bar(stat = "identity")
resultsplot + scale_x_discrete(limits = results$Clusters)
resultsplot + scale_fill_gradient(high = "red", low = "green")
resultsplot
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
resultsplot
#Create "resultsplot" vector with core plotting
resultsplot <- ggplot(results, aes(x = Clusters, y = Data, fill = Data)) +
geom_bar(stat = "identity") +
scale_x_discrete(limits = results$Clusters) +
scale_fill_gradient(high = "red", low = "green")
#Manual Entries for Titles, Subtitles and Captions.
plot1title <- readline("What should the title of the plot be? ")
plot1caption <- readline("Add a caption? ")
#Add Labels
resultsplot + labs(title = plot1title,
subtitle = plot1subtitle,
caption = plot1caption)
?ggplot
