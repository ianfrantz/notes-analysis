library(tm)
library(reshape)
library (SnowballC)
library (dplyr)
#Load Noble Data
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V15)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
#-----Subset data based on matching words-----
#Creating payment related notes
matchwords <- c("pay", "pmnt", "pyt")
payment.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
str(notes)
str(payment.notes)
payment.notes %in% notes
payment.notes$V1 %in% notes$V1
notes$V1 %in% payment.notes$V1
notes <- notes[-payment.notes$V1,]
payment.notes$V1 %in% notes$V1
matchwords <- c("activ", "activation")
activation.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
notes <- notes[-activation.notes$V1,]
activation.notes$V1 %in% notes$V1
activation.notes
activation.notes$V1[,4]
activation.notes$V1[4,
]
activation.notes[4,]
notes[24,]
notes[23,]
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V15)
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
notes <- tibble(notes)
tibble(notes)
is.atomic(notes$V1)
is.atomic(notes$V15)
library(tidyverse)
install.packages("tidyr")
library(tidyverse)
notes <- as_tibble(notes)
str(notes)
head(notes)
notes
matchwords <- c("pay", "pmnt", "pyt")
payment.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
notes <- notes[-payment.notes$V1,]
notes <- notes[-payment.notes$V1,]
notes <- notes[-payment.notes$V1,]
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V15)
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
notes <- as_tibble(notes)
notes <- notes[-payment.notes$V1,]
matchwords <- c("pay", "pmnt", "pyt")
payment.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
notes <- notes[-payment.notes$V1,]
matchwords <- c("activ", "activation")
activation.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
notes <- notes[-activation.notes$V1,]
activation.notes$V1 %in% notes$V1
library(tm)
library(reshape)
library (SnowballC)
library (dplyr)
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V15)
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
library(tm)
library(reshape)
library (SnowballC)
library (dplyr)
#Load Noble Data
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V15)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
#-----Subset data based on matching words-----
#Creating payment related notes
matchwords <- c("pay", "pmnt", "pyt")
payment.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
#Remove subsetted data from original data.frame and preserving the data.frame structure
notes <- notes[-payment.notes$V1,]
matchwords <- c("activ", "activation")
activation.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
notes <- notes[-activation.notes$V1,]
activation.notes[1,]
notes[2,]
notes <- notes[-activation.notes$V1,]
activation.notes$V1 %in% notes$V1
activation.notes[1,]
activation.notes[4,]
notes[1,]
notes[4,]
View(notes)
View(notes)
for (i in payment.notes$V1) {
if (payment.notes$V1 == notes$V1) {
notes[-notes$V1 == i,]
}
}
library(reshape)
library (SnowballC)
library (dplyr)
#Load Noble Data
df <- read.csv("6-27notes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V15)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V15 ~ V1, data = notes, paste, collapse = ", ")
#-----Subset data based on matching words-----
#Creating payment related notes
matchwords <- c("pay", "pmnt", "pyt")
payment.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
payment.notes$V1 %in% notes$V1
payment.notes$V1 %in% notes$V1 %>% which()
payment.notes$V1 %in% notes$V1 %>% which(notes$V1)
which (payment.notes$V1 %in% notes$V1)
?which
which (notes$V1, payment.notes$V1 %in% notes$V1)
which (notes$V1 == payment.notes$V1)
which (payment.notes$V1 == notes$V1)
which (payment.notes$V1 %in% notes$V1)
which (notes$V1 %in% payment.notes)
which (notes$V1 %in% payment.notes$V1)
rowlocation <- which (notes$V1 %in% payment.notes$V1)
notes <- notes[-rowlocation,]
rowlocation <- which (notes$V1 %in% payment.notes$V1)
matchwords <- c("activ", "activation")
activation.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
rowlocation <- which (notes$V1 %in% activation.notes$V1)
notes <- notes[-rowlocation,]
View(notes)
View(notes)
rowlocation
1000/.50/.50
setwd("C:/Users/ianfr/Desktop/R_Programs/notes analysis")
library(tm)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V2)
notes <- aggregate(V12 ~ V1, data = notes, paste, collapse = ", ")
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V15),]
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% refund.notes$V1)
notes <- notes[-rowlocation,]
notes
matchwords <- c("recommend")
recommend.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% activation.notes$V1)
rowlocation <- which (notes$V1 %in% recommend.notes$V1)
notes <- notes[-rowlocation,]
library (dplyr)
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
notes <- select(df, V1, V2)
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
View(notes)
View(notes)
notes <- notes[-rowlocation,]
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% refund.notes$V1)
notes <- notes[-rowlocation,]
matchwords <- c("recommend")
recommend.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% recommend.notes$V1)
notes <- notes[-rowlocation,]
library (dplyr)
#Load notes into dataframe
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#-----Start subsetting data based on matching words-----
#Creating refund related notes and apply them across notes dataframe
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
#Match logical note numbers with row id:
rowlocation <- which (notes$V1 %in% refund.notes$V1)
#Remove subsetted data from original data.frame and preserving the data.frame structure
notes <- notes[-rowlocation,]
#Same four components for a new group of matching words.
matchwords <- c("recommend")
recommend.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% recommend.notes$V1)
notes <- notes[-rowlocation,]
library("tidyverse")
dat1 <- iris
dat2 <- mtcars
dat3 <- as.tibble(iris)
foo <- 1:5
data <- ls()
ls()
str(data)
length(data)
lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
length(x)
}
})
str(lengths)
class(dat1)
library (dplyr)
#Load notes into dataframe
df <- read.csv("generalnotes.csv", stringsAsFactors = FALSE, header = FALSE)
#Create only dataframe with needed information
notes <- select(df, V1, V2)
#Using aggregate to create notes as a tidy dataset
notes <- aggregate(V2 ~ V1, data = notes, paste, collapse = ", ")
#-----Start subsetting data based on matching words-----
#Creating refund related notes and apply them across notes dataframe
matchwords <- c("refund", "damaged")
refund.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
#Match logical note numbers with row id:
rowlocation <- which (notes$V1 %in% refund.notes$V1)
#Remove subsetted data from original data.frame and preserving the data.frame structure
notes <- notes[-rowlocation,]
#Same four components for a new group of matching words.
matchwords <- c("recommend")
recommend.notes <- notes[grep(paste(matchwords, collapse = "|"), notes$V2),]
rowlocation <- which (notes$V1 %in% recommend.notes$V1)
notes <- notes[-rowlocation,]
data <- ls()
data
lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
length(x)
}
})
unlist(lengths)
data
lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
length(x)
}
})
str(length)
str(lengths)
str(df)
dat1 <- iris
dat1
length(dat1)
length(dat1$Sepal.Length)
lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
unlist(lengths)
data <- ls()
lengths <- map(data, .f = function(x) {
x <- get(x)
if ("data.frame" %in% class(x)) {
nrow(x)
}
})
unlist(lengths)
length(notes$V1)
